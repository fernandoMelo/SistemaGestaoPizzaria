/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.gestao.pizzaria.apresentacao;

import br.com.gestao.pizzaria.entidade.Cliente;
import br.com.gestao.pizzaria.entidade.Pedido;
import br.com.gestao.pizzaria.excecao.GestaoPizzariaException;
import br.com.gestao.pizzaria.excecao.ValidarCamposPesquisaException;
import br.com.gestao.pizzaria.negocio.ClienteBO;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author aluno
 */
public class PesquisarPedidoForm extends javax.swing.JFrame {

    private List<Pedido> pedidos;

    private CadastrarPedidoForm novoPedidoForm;
    private CadastrarClienteForm editarPedidoForm;
    
    private SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
    
    public PesquisarPedidoForm() {
        this.prepararTela();
    }

    private void prepararTela() {
        try {
            this.initComponents();
            this.carregarTabelaClientes();
        } catch (Exception e) {
            String mensagem = "Erro inesperado! Informe a mensagem de erro ao administrador do sistema.";
            mensagem += "\nMensagem de erro:\n" + e.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Clientes Cadastrados", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        }
    }

    public void carregarTabelaClientes() throws SQLException {
        ClienteBO clienteBO = new ClienteBO();
        this.clientes = clienteBO.buscarTodos();

        ModeloTabelaCliente modelo = new ModeloTabelaCliente();
        tblResultado.setModel(modelo);

    }

    public void carregarTabelaPesquisaClientes() throws SQLException {

        ModeloTabelaCliente modelo = new ModeloTabelaCliente();
        tblResultado.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpPesquisarPor = new javax.swing.ButtonGroup();
        pnlPedidosAbertos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPedidosAbertos = new javax.swing.JTable();
        btnNovo = new javax.swing.JButton();
        btnFechar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pedidos Cadastrados");
        setExtendedState(6);

        pnlPedidosAbertos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pedidos em aberto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 15))); // NOI18N

        tblPedidosAbertos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblPedidosAbertos);

        btnNovo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gestao/pizzaria/icones/add133.png"))); // NOI18N
        btnNovo.setText("Novo");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPedidosAbertosLayout = new javax.swing.GroupLayout(pnlPedidosAbertos);
        pnlPedidosAbertos.setLayout(pnlPedidosAbertosLayout);
        pnlPedidosAbertosLayout.setHorizontalGroup(
            pnlPedidosAbertosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPedidosAbertosLayout.createSequentialGroup()
                .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );
        pnlPedidosAbertosLayout.setVerticalGroup(
            pnlPedidosAbertosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPedidosAbertosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111))
        );

        btnFechar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gestao/pizzaria/icones/clear5.png"))); // NOI18N
        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        btnExcluir.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gestao/pizzaria/icones/delete81.png"))); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnEditar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gestao/pizzaria/icones/edition2.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlPedidosAbertos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 150, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlPedidosAbertos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        PesquisarPedidoForm.this.dispose();
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        this.exibirTelaCadastroCliente();
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        this.editarCliente();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        this.excluirCliente();
    }//GEN-LAST:event_btnExcluirActionPerformed
    
    private void desabilitarCampos(){
        if (rdoNome.isSelected()) {
            txtNome.setEnabled(true);
            txtCPF.setEnabled(false);
            txtRG.setEnabled(false);
        } else if (rdoCPF.isSelected()) {
            txtNome.setEnabled(false);
            txtCPF.setEnabled(true);
            txtRG.setEnabled(false);
        } else {
            txtNome.setEnabled(false);
            txtCPF.setEnabled(false);
            txtRG.setEnabled(true);
        }
    }
      
    private void pesquisarCliente() {

        try {
            this.validarCamposPesquisa();
            String filtro = this.recuperarFiltro();
            String palavraPesquisada = this.recuperarPalavraPesquisada();

            ClienteBO clienteBO = new ClienteBO();
            this.clientes = clienteBO.pesquisar(filtro, palavraPesquisada);

            this.carregarTabelaPesquisaClientes();

        } catch (GestaoPizzariaException e) {
            String mensagem = "Pesquisa não realizada:\n" + e.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Pesquisa de cliente", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            String mensagem = "Sua pesquisa não retornou nenhum resultado.";
            mensagem += "\nMensagem de erro:\n" + e.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Pesquisa de cliente", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            String mensagem = "Erro inesperado! Informe a mensagem de erro ao administrador do sistema.";
            mensagem += "\nMensagem de erro:\n" + e.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Pesquisa de cliente", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void limparPesquisa(){
        this.limparCamposPesquisa();
        try {
            this.carregarTabelaClientes();
        } catch (SQLException e) {
            String mensagem = "Erro inesperado! Informe a mensagem de erro ao administrador do sistema.";
            mensagem += "\nMensagem de erro:\n" + e.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Limpar Pesquisa", JOptionPane.ERROR_MESSAGE);
        }        
    }
    
    private void limparCamposPesquisa(){
        txtNome.setText("");
        txtCPF.setText("");
        txtRG.setText("");
    }

    private void validarCamposPesquisa() {
        if ((!rdoNome.isSelected() && !rdoCPF.isSelected() && !rdoRG.isSelected())
            ||(txtNome.getText().trim().isEmpty() && txtCPF.getText().trim().isEmpty() && txtRG.getText().trim().isEmpty())){
            throw new ValidarCamposPesquisaException();
        }
    }

    private String recuperarFiltro() {

        String filtro;
        if (rdoNome.isSelected()) {
            filtro = "NOME";
        } else if (rdoCPF.isSelected()) {
            filtro = "CPF";
        } else {
            filtro = "RG";
        }
        return filtro;
    }

    private String recuperarPalavraPesquisada() {
        String palavraPesquisada;
        
        if (rdoNome.isSelected()) {
            palavraPesquisada = txtNome.getText().trim();
        } else if (rdoCPF.isSelected()) {
            palavraPesquisada = txtCPF.getText().trim();
        } else {
            palavraPesquisada = txtRG.getText().trim();
        }
        return palavraPesquisada;
    }

    private void editarCliente() {
        int linhaSelecionada = tblResultado.getSelectedRow();
        if (linhaSelecionada != -1) {
            Cliente ClienteSelecionado = clientes.get(linhaSelecionada);

            if (this.editarClienteForm != null) {
                this.editarClienteForm.dispose();
            }
            this.editarClienteForm = new CadastrarClienteForm(this, ClienteSelecionado);
            this.editarClienteForm.setVisible(true);


        } else {
            String mensagem = "Nenhuma Cliente Selecionado.";
            JOptionPane.showMessageDialog(this, mensagem, "Edição de Cliente", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void excluirCliente() {
        try {
            int linhaSelecionada = tblResultado.getSelectedRow();
            if (linhaSelecionada != -1) {
                Cliente clienteSelecionado = clientes.get(linhaSelecionada);

                int resposta;
                String mensagem = "Deseja excluir a cliente: "
                        + clienteSelecionado.getNome();
                String titulo = "Exclusão de Cliente";
                resposta = JOptionPane.showConfirmDialog(this,
                        mensagem, titulo, JOptionPane.YES_NO_OPTION);

                if (resposta == JOptionPane.YES_OPTION) {
                    ClienteBO clienteBO = new ClienteBO();
                    clienteBO.excluir(clienteSelecionado.getId());

                    String mensagemSuceso = "Cliente: "
                            + clienteSelecionado.getNome() + ", "
                            + "excluído com sucesso.";
                    JOptionPane.showMessageDialog(this,
                            mensagemSuceso, titulo,
                            JOptionPane.INFORMATION_MESSAGE);

                    this.carregarTabelaClientes();
                }
            } else {
                String mensagem = "Nenhuma cliente selecionado.";
                JOptionPane.showMessageDialog(this,
                        mensagem,
                        "Exclusão de cliente",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            String mensagem = "Erro inesperado! Informe a mensagem de erro ao administrador do sistema.";
            mensagem += "\nMensagem de erro:\n" + e.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Exclusão de cliente", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        }

    }

    private void exibirTelaCadastroCliente() {
        if (this.novoClienteForm == null) {
            this.novoClienteForm = new CadastrarClienteForm();
        }
        novoClienteForm.setVisible(true);
        novoClienteForm.toFront();
        this.dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PesquisarPedidoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PesquisarPedidoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PesquisarPedidoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PesquisarPedidoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PesquisarPedidoForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnFechar;
    private javax.swing.JButton btnNovo;
    private javax.swing.ButtonGroup grpPesquisarPor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlPedidosAbertos;
    private javax.swing.JTable tblPedidosAbertos;
    // End of variables declaration//GEN-END:variables

    private class ModeloTabelaCliente extends AbstractTableModel {

        public String getColumnName(int coluna) {
            if (coluna == 0) {
                return "NOME";
            } else if (coluna == 1) {
                return "CPF";
            } else if (coluna == 2) {
                return "RG";
            } else if (coluna == 3) {
                return "DATA DE NASCIMENTO";
            } else if (coluna == 4) {
                return "SEXO";
            } else if (coluna == 5) {
                return "TELEFONE";
            }else {
                return "ENDEREÇO";
            }
        }

        @Override
        public int getRowCount() {
            return clientes.size();
        }

        @Override
        public int getColumnCount() {
            return 7;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Cliente cliente = clientes.get(rowIndex);
            if (columnIndex == 0) {
                return cliente.getNome();
            } else if (columnIndex == 1) {
                return cliente.getCPF();
            } elpnlPedidosAbertoslumnIndex == 2) {
                return cliente.getRG();
            } else if (columnIndex == 3) {
                return  formatoData.format(cliente.getDataNascimento());
            } else if (columnIndex == 4) {
                return cliente.getSexo();
            }else if (columnIndex == 5) {
                return cliente.getTelefone();
            }else {
                return cliente.getEndereco();
            }
        }
    }
}
